{"version":3,"sources":["showInfo.js","App.js","serviceWorker.js","index.js"],"names":["Showinfo","index","id","name","mainUrl","imgUrl","numbers","className","src","alt","title","href","target","rel","style","fontWeight","color","fontSize","App","state","isLoading","infos","aQuote","makeQuote","a","qIndex","Math","floor","random","require","qDict","setState","componentDidMount","render","console","log","quote","author","map","info","key","idx","main_url","subscribers","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"m6wDAiBeA,MAdf,YAAmE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,GAAKC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,QAAUC,EAAmB,EAAnBA,OAASC,EAAU,EAAVA,QAEpD,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAW,mBAAmBC,IAAKH,EAAQI,IAAK,QAAQR,EAAOS,MAAO,wBAAwBT,KAEvG,uBAAGM,UAAU,UAAUI,KAAMP,EAASQ,OAAO,SAASC,IAAI,uBAAsB,8BAAOX,IACvF,uBAAGY,MAAO,CAACC,WAAY,MAAOC,MAAO,UAAWC,SAAU,QAASN,KAAMP,EAASQ,OAAO,SAASC,IAAI,uBAAuBV,GAC7H,sCAAQG,EAAR,iBCmDGY,E,2MAzDbC,MAAQ,CACNC,WAAY,EACZC,MAAQ,GACRC,OAAS,I,EAGXC,U,sBAAY,8BAAAC,EAAA,6DACJC,EAASC,KAAKC,MAAoB,IAAdD,KAAKE,UADrB,SAEUC,EAAQ,IAFlB,OAEJC,EAFI,OAGV,EAAKC,SAAS,CAACT,OAASQ,EAAML,KAHpB,2C,EAMZO,kB,sBAAoB,4BAAAR,EAAA,sEACEK,EAAQ,IADV,OACZR,EADY,OAElB,EAAKU,SAAS,CAACX,WAAW,EAAOC,MAAQA,IAEzC,EAAKE,YAJa,2C,EAOpBU,OAAS,WAAO,IAAD,EACsB,EAAKd,MAAjCC,EADM,EACNA,UAAWC,EADL,EACKA,MAAOC,EADZ,EACYA,OAOzB,OANIF,GACFc,QAAQC,IAAI,+BAMZ,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,aACb,gDAEF,yBAAKA,UAAU,cACb,2BAAIe,EAAOc,MAAM,MAAM,2BAAId,EAAOe,WAGtC,yBAAK9B,UAAU,eAEXc,EAAMiB,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CACEC,IAAOD,EAAKE,IACZxC,MAASsC,EAAKE,IACdvC,GAAMqC,EAAKrC,GACXC,KAAQoC,EAAKpC,KACbC,QAAWmC,EAAKG,SAChBrC,OAAUkC,EAAKlC,OACfC,QAAWiC,EAAKI,oB,6BAhDdC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OAAO,kBAAC,EAAD,MAASmB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.bc3b08f4.chunk.js","sourcesContent":["import React from 'react'\r\nimport './showInfo.css'\r\n\r\nfunction Showinfo({index, id , name, mainUrl , imgUrl , numbers}) {\r\n\r\n    return (\r\n        <div className=\"item-wrapper\">\r\n            <div className=\"make_radius\">\r\n                <img className =\"item-wrapper-img\" src={imgUrl} alt={\"image\"+index} title={\"instagram cover image\"+index} />\r\n            </div>\r\n            <a className=\"item-id\" href={mainUrl} target=\"_blank\" rel='noopener noreferrer'><span>{id}</span></a>\r\n            <a style={{fontWeight: \"400\", color: \"hotpink\", fontSize: '20px'}} href={mainUrl} target=\"_blank\" rel='noopener noreferrer'>{name}</a>\r\n            <h3>{`${numbers} Followers`}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Showinfo","import React from 'react';\nimport './App.css';\nimport ShowInfo from './showInfo'\n\n\nclass App extends React.Component {\n  state = {\n    isLoading : true,\n    infos : [],\n    aQuote : {}\n  };\n  \n  makeQuote = async() => {\n    const qIndex = Math.floor(Math.random()*199)\n    const qDict = await require('./information/quotes.json')\n    this.setState({aQuote : qDict[qIndex]})\n  }\n  \n  componentDidMount = async() => {\n    const infos = await require('./information/infos2.json')\n    this.setState({isLoading: false, infos : infos})\n    \n    this.makeQuote();\n  }\n\n  render = () => {\n    const {isLoading, infos, aQuote} = this.state;\n    if (isLoading) {\n      console.log(\"contents is being loaded...\")\n    }\n    else {\n      //console.log(quotes)\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-title\">\n            <h1>- the highest -</h1>\n          </div>\n          <div className=\"App-quotes\">\n            <p>{aQuote.quote+\" - \"}<i>{aQuote.author}</i></p>\n          </div>\n        </div>  \n        <div className=\"App-wrapper\">\n          {\n            infos.map(info => (\n              <ShowInfo \n                key = {info.idx}\n                index = {info.idx} \n                id = {info.id}\n                name = {info.name}\n                mainUrl = {info.main_url}\n                imgUrl = {info.imgUrl}\n                numbers = {info.subscribers}\n              />\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}